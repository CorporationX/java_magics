package entity.basics_programming.collection.collections;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class theory {
    static void main() {
        // üí´Collections.copy()
        System.out.println("  \uD83D\uDCABCollections.copy()");

        // –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
        List<String> originalList = List.of("–ú–∞–Ω—Ç–∏—è-–Ω–µ–≤–∏–¥–∏–º–∫–∞", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å", "–ë—É–∑–∏–Ω–Ω–∞—è –ø–∞–ª–æ—á–∫–∞");

        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¢–û–ß–ù–û —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π null
        // 1. new String[originalList.size()] -> —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ String[] –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ [null, null, null]
        // 2. Arrays.asList(...) -> –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ List<String> —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        // 3. new ArrayList<>(...) -> —Å–æ–∑–¥–∞–µ—Ç –ò–ó–ú–ï–ù–Ø–ï–ú–´–ô ArrayList, –∫–æ–ø–∏—Ä—É—è null'—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø.2
        List<String> backupList = new ArrayList<>(Arrays.asList(new String[originalList.size()]));

        System.out.println("–°–ø–∏—Å–æ–∫-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: " + backupList);

        // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!
        Collections.copy(backupList, originalList); // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ originalList –í backupList

        System.out.println("–°–ø–∏—Å–æ–∫-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ü–û–°–õ–ï –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: " + backupList);


        // üí´ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –°–æ–∑–¥–∞–Ω–∏–µ –ö–æ–ª–ª–µ–∫—Ü–∏–π: List.of(), Set.of(), Map.of()
        System.out.println("\n\n  \uD83D\uDCAB –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –°–æ–∑–¥–∞–Ω–∏–µ –ö–æ–ª–ª–µ–∫—Ü–∏–π: List.of(), Set.of(), Map.of()");

        // –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –°–ø–∏—Å–æ–∫
        List<String> spells = List.of("–≠–∫—Å–ø–µ–ª–ª–∏–∞—Ä–º—É—Å", "–ü—Ä–æ—Ç–µ–≥–æ", "–°—Ç—É–ø–µ—Ñ–∏", "–ü—Ä–æ—Ç–µ–≥–æ"); // –î—É–±–ª–∏–∫–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        System.out.println("–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π: " + spells);
        // spells.add("–ò–Ω—Å–µ–Ω–¥–∏–æ"); // –í—ã–∑–æ–≤–µ—Ç UnsupportedOperationException! –û–®–ò–ë–ö–ê!

        // –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ
        Set<String> artifacts = Set.of("–ú–∞–Ω—Ç–∏—è-–Ω–µ–≤–∏–¥–∏–º–∫–∞", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å", "–ë—É–∑–∏–Ω–Ω–∞—è –ø–∞–ª–æ—á–∫–∞");
        System.out.println("–ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: " + artifacts);
        // artifacts.add("–ú–∞—Ö–æ–≤–∏–∫ –≤—Ä–µ–º–µ–Ω–∏"); // –í—ã–∑–æ–≤–µ—Ç UnsupportedOperationException! –û–®–ò–ë–ö–ê!
        // artifacts.add("–ú–∞–Ω—Ç–∏—è-–Ω–µ–≤–∏–¥–∏–º–∫–∞"); // –û—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∂–µ

        // –ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –ö–∞—Ä—Ç–∞ (–¥–æ 10 –ø–∞—Ä)
        Map<String, Integer> powerLevels = Map.of(
                "–ì–∞—Ä—Ä–∏", 100,
                "–í–æ–ª–¥–µ–º–æ—Ä—Ç", 500, // –£–ø—Å!
                "–î–∞–º–±–ª–¥–æ—Ä", 450
        );
        System.out.println("–ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –∫–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω–µ–π —Å–∏–ª—ã: " + powerLevels);
        // powerLevels.put("–°–Ω–µ–π–ø", 300); // –í—ã–∑–æ–≤–µ—Ç UnsupportedOperationException! –û–®–ò–ë–ö–ê!

        // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–π –∫–∞—Ä—Ç—ã —Å >10 –ø–∞—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Map.ofEntries()
        Map<String, String> ministryDepts = Map.ofEntries(
                Map.entry("–û—Ç–¥–µ–ª –¢–∞–π–Ω", "–£—Ä–æ–≤–µ–Ω—å 9"),
                Map.entry("–û—Ç–¥–µ–ª –ü—Ä–∞–≤–æ–ø–æ—Ä—è–¥–∫–∞", "–£—Ä–æ–≤–µ–Ω—å 2"),
                Map.entry("–û—Ç–¥–µ–ª –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ", "–£—Ä–æ–≤–µ–Ω—å 4")
                // ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ entry
        );
        System.out.println("–ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–¥–µ–ª–æ–≤: " + ministryDepts);

        //üí´ –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        System.out.println("\n\n  \uD83D\uDCAB –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π");

        // Arrays.asList(...)

        String[] spellArray = {"–≠–∫—Å–ø–µ–ª–ª–∏–∞—Ä–º—É—Å", "–ü—Ä–æ—Ç–µ–≥–æ", "–°—Ç—É–ø–µ—Ñ–∏"};
        List<String> spellList = Arrays.asList(spellArray);
        System.out.println("–°–ø–∏—Å–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞: " + spellList);
        spellList.set(0, "–ò–Ω—Å–µ–Ω–¥–∏–æ"); // –û–ö! –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ
        System.out.println("–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: " + spellList);
        // spellList.add("–ê–∫—Ü–∏–æ"); // –û–®–ò–ë–ö–ê! UnsupportedOperationException
        //        –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω—è–µ–º—ã–π ArrayList –∏–∑ –º–∞—Å—Å–∏–≤–∞, –¥–µ–ª–∞—é—Ç —Ç–∞–∫:

        List<String> mutableSpellList = new ArrayList<>(Arrays.asList(spellArray));
        mutableSpellList.add("–ê–∫—Ü–∏–æ"); // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ!


        // Collections.singletonList(), singletonSet(), singletonMap()


        //–°–æ–∑–¥–∞—é—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (—Å–ø–∏—Å–æ–∫, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–ª–∏ –∫–∞—Ä—Ç—É), —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∏–ª–∏ –æ–¥–Ω—É –ø–∞—Ä—É –¥–ª—è Map). –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –º–µ—Ç–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –µ–µ —Å–æ–∑–¥–∞—Ç—å.
        //
        List<String> oneArtifact = Collections.singletonList("–ú–∞—Ö–æ–≤–∏–∫ –í—Ä–µ–º–µ–Ω–∏");
        Set<Integer> oneNumber = Collections.singleton(42);
        // oneArtifact.add("–ö–∞—Ä—Ç–∞ –ú–∞—Ä–æ–¥–µ—Ä–æ–≤"); // –û–®–ò–ë–ö–ê! –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π


        // Collections.emptyList(), emptySet(), emptyMap()


        //–°–æ–∑–¥–∞—é—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—É—é –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        // –ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –º–µ—Ç–æ–¥–∞ –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ null,
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NullPointerException —É –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞.
        // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≥–æ—Ç–æ–≤—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø—É—Å—Ç–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
        //
        //public List<String> findSpellsByType(String type) {
        //    List<String> results = // ... –ø–æ–∏—Å–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π ...
        //    if (results.isEmpty()) {
        //        return Collections.emptyList(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫
        //    }
        //    return results;
    }
}
